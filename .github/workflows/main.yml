name: OMR to MIDI Conversion

on:
  # Triggers the workflow on pushes to the 'main' branch
  push:
    branches: [ "main" ]
    paths:
      # Only run if an image file is added or changed in the 'scores/' folder
      - 'scores/*.{png,jpg,jpeg,pdf}'
  # Allows you to manually run the workflow from the Actions tab
  workflow_dispatch:

jobs:
  convert_score:
    runs-on: ubuntu-latest
    
    # Define variables for easier path management
    env:
      INPUT_DIR: scores
      OUTPUT_DIR: music_data

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4
        
      - name: ‚öôÔ∏è Install Python Dependencies
        # Install the Python library 'music21' which we will use in a later step
        run: pip install music21

      - name: üßπ Create Output Directory
        # Create a directory to store the MusicXML and MIDI outputs
        run: mkdir -p ${{ env.OUTPUT_DIR }}

      - name: üéµ Run Audiveris (OMR to MusicXML) via Docker
        # Use a community-maintained Docker image with Audiveris pre-installed
        # This is far more reliable than building Java/Gradle dependencies on the fly
        uses: docker://toprock/audiveris:latest
        with:
          # Mount the scores and music_data folders to the container
          args: >
            /Audiveris/bin/Audiveris 
            -batch 
            -export 
            -output /output 
            -option org.audiveris.omr.sheet.BookManager.useSeparateBookFolders=false
            /input/*.{png,jpg,jpeg,pdf}
        # The volumes map the local directories to the container's /input and /output
        # The Audiveris command inside the container will output MusicXML files 
        # directly to the local 'music_data' folder.
        volumes:
          - ${{ github.workspace }}/${{ env.INPUT_DIR }}:/input
          - ${{ github.workspace }}/${{ env.OUTPUT_DIR }}:/output

      - name: üéº Run MusicXML to MIDI Conversion
        # Use a multi-line script to find all new MusicXML files and convert them
        run: |
          for XML_FILE in ${{ env.OUTPUT_DIR }}/*.mxl; do
            if [ -f "$XML_FILE" ]; then
              echo "Converting $XML_FILE to MIDI..."
              python scripts/xml_to_midi.py "$XML_FILE"
            fi
          done

      - name: ‚¨ÜÔ∏è Upload Generated MIDI/XML Files
        uses: actions/upload-artifact@v4
        with:
          name: converted-music-files
          path: ${{ env.OUTPUT_DIR }}
          # Keep only the generated MusicXML and MIDI files in the final commit/artifact
          retention-days: 7

      - name: üîÑ Commit Generated Files
        # Commit the new MusicXML and MIDI files back to the repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'ci: generate MusicXML and MIDI from new scores'
          file_pattern: ${{ env.OUTPUT_DIR }}/*.{mxl,mid}
          # This is important to allow pushing the generated files
          skip_dirty_check: true
