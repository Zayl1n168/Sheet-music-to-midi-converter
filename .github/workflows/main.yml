name: OMR to MIDI Conversion

on:
  # Triggers the workflow on pushes to the 'main' branch
  push:
    branches: [ "main" ]
    paths:
      # Only run if an image file is added or changed in the 'scores/' folder
      - 'scores/*.{png,jpg,jpeg,pdf}'
  # Allows you to manually run the workflow from the Actions tab
  workflow_dispatch:

jobs:
  convert_score:
    runs-on: ubuntu-latest
    
    # Define variables for easier path management
    env:
      INPUT_DIR: scores
      OUTPUT_DIR: music_data

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4
        
      - name: ‚öôÔ∏è Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: üì¶ Install Python Dependencies
        run: pip install -r requirements.txt

      - name: üßπ Create Output Directory
        # Create a directory to store the MusicXML and MIDI outputs
        run: mkdir -p ${{ env.OUTPUT_DIR }}

      - name: üéµ Run Audiveris (OMR to MusicXML) via Docker CLI 
        # FIX: Using 'docker run' for reliable volume mounting and corrected executable path.
        run: |
          echo "Starting OMR process using Audiveris Docker..."
          docker run --rm \
            -v ${{ github.workspace }}/${{ env.INPUT_DIR }}:/input \
            -v ${{ github.workspace }}/${{ env.OUTPUT_DIR }}:/output \
            toprock/audiveris:latest \
            /audiveris-extract/bin/Audiveris \
            -batch \
            -export \
            -output /output \
            -option org.audiveris.omr.sheet.BookManager.useSeparateBookFolders=false \
            /input/*.{png,jpg,jpeg,pdf}
          echo "Audiveris OMR complete."

      - name: üéº Run MusicXML to MIDI Conversion (Python)
        # Finds all generated .mxl files and converts them using the Python script
        run: |
          for XML_FILE in ${{ env.OUTPUT_DIR }}/*.mxl; do
            if [ -f "$XML_FILE" ]; then
              echo "Converting $XML_FILE to MIDI..."
              python scripts/xml_to_midi.py "$XML_FILE"
            fi
          done

      - name: ‚¨ÜÔ∏è Upload Generated MIDI/XML Files (as Artifact)
        # Makes the generated files available to download directly from the GitHub Actions run
        uses: actions/upload-artifact@v4
        with:
          name: converted-music-files
          path: ${{ env.OUTPUT_DIR }}
          retention-days: 7

      - name: üîÑ Commit Generated Files
        # Commits the output MusicXML and MIDI files back to your repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'ci: generate MusicXML and MIDI from new scores'
          file_pattern: ${{ env.OUTPUT_DIR }}/*.{mxl,mid}
          skip_dirty_check: true
